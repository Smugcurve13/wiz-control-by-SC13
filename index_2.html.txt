<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>WiZ Smart Light Control</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@jaames/iro@5.5.2/dist/iro.min.js"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
    <style>
        :root {
            --primary: #6366f1;
            --primary-dark: #4f46e5;
            --dark: #1e293b;
            --light: #f8fafc;
            --gray: #94a3b8;
            --success: #10b981;
            --danger: #ef4444;
        }
        
        body {
            background: linear-gradient(135deg, #f5f7fa 0%, #e4e7eb 100%);
            min-height: 100vh;
            color: var(--dark);
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
        }
        
        .card {
            background: white;
            border: none;
            border-radius: 12px;
            box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.05), 
                        0 8px 10px -6px rgba(0, 0, 0, 0.02);
            overflow: hidden;
        }
        
        .light-icon {
            width: 80px;
            height: 80px;
            background: white;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.05), 
                        0 2px 4px -2px rgba(0, 0, 0, 0.05);
            transition: all 0.3s ease;
            margin-bottom: 1.5rem;
        }
        
        .light-icon i {
            font-size: 2rem;
            color: var(--gray);
        }
        
        .light-icon.active {
            background: var(--primary);
            box-shadow: 0 0 0 8px rgba(99, 102, 241, 0.2);
        }
        
        .light-icon.active i {
            color: white;
        }
        
        .btn-power {
            font-weight: 600;
            letter-spacing: 0.5px;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            border-radius: 8px;
            padding: 0.75rem 1.5rem;
            box-shadow: none;
        }
        
        .btn-on {
            background-color: var(--primary);
            color: white;
        }
        
        .btn-on:hover, .btn-on:focus {
            background-color: var(--primary-dark);
            transform: translateY(-1px);
        }
        
        .btn-off {
            background-color: white;
            color: var(--danger);
            border: 1px solid var(--gray);
        }
        
        .btn-off:hover, .btn-off:focus {
            background-color: #fef2f2;
            border-color: var(--danger);
            transform: translateY(-1px);
        }
        
        .slider-value {
            display: inline-block;
            min-width: 50px;
            text-align: center;
            background: var(--light);
            padding: 0.25rem 0.75rem;
            border-radius: 8px;
            font-weight: 500;
            font-size: 0.875rem;
            color: var(--dark);
        }
        
        .form-range::-webkit-slider-thumb {
            width: 20px;
            height: 20px;
            background: var(--primary);
            border: none;
            box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px -1px rgba(0, 0, 0, 0.1);
            transition: all 0.2s ease;
        }
        
        .form-range::-webkit-slider-thumb:hover {
            transform: scale(1.1);
        }
        
        .form-range::-moz-range-thumb {
            width: 20px;
            height: 20px;
            background: var(--primary);
            border: none;
            box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px -1px rgba(0, 0, 0, 0.1);
        }
        
        .form-range::-ms-thumb {
            width: 20px;
            height: 20px;
            background: var(--primary);
            border: none;
            box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px -1px rgba(0, 0, 0, 0.1);
        }
        
        #colorPicker {
            margin: 0 auto;
            width: 100%;
            max-width: 300px;
        }
        
        .control-label {
            font-weight: 500;
            margin-bottom: 0.5rem;
            display: flex;
            align-items: center;
            color: var(--dark);
        }
        
        .control-label i {
            margin-right: 0.75rem;
            font-size: 1.1rem;
            color: var(--gray);
        }
        
        .section-title {
            color: var(--dark);
            font-weight: 600;
            font-size: 1rem;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            margin-bottom: 1.5rem;
            position: relative;
            padding-bottom: 0.5rem;
        }
        
        .section-title::after {
            content: '';
            position: absolute;
            bottom: 0;
            left: 0;
            width: 40px;
            height: 2px;
            background: var(--primary);
        }
        
        .form-range {
            height: 6px;
            cursor: pointer;
        }
        
        .form-range::-webkit-slider-runnable-track {
            background: #e2e8f0;
            border-radius: 4px;
        }
        
        .status-indicator {
            width: 10px;
            height: 10px;
            border-radius: 50%;
            display: inline-block;
            margin-right: 8px;
            background: var(--gray);
        }
        
        .status-indicator.active {
            background: var(--success);
            box-shadow: 0 0 0 3px rgba(16, 185, 129, 0.2);
        }
        
        .control-section {
            margin-bottom: 2rem;
            padding-bottom: 1.5rem;
            border-bottom: 1px solid #f1f5f9;
        }
        
        .control-section:last-child {
            border-bottom: none;
            margin-bottom: 0;
            padding-bottom: 0;
        }
        
        @media (max-width: 576px) {
            .btn-power {
                padding: 0.5rem 1rem;
                font-size: 0.875rem;
            }
        }
    </style>
</head>
<body>
    <div class="container py-5">
        <div class="row justify-content-center">
            <div class="col-md-8 col-lg-6">
                <div class="card p-4">
                    <div class="text-center">
                        <h1 class="h4 fw-semibold mb-3">WiZ Smart Light Control</h1>
                        <div class="light-icon mx-auto" id="lightIcon">
                            <i class="bi bi-lightbulb"></i>
                        </div>
                        <div class="d-flex align-items-center justify-content-center mb-4">
                            <span class="status-indicator" id="statusIndicator"></span>
                            <small class="text-muted" id="statusText">Disconnected</small>
                        </div>
                    </div>
                    
                    <!-- Power Control Section -->
                    <div class="control-section">
                        <h3 class="section-title">Power</h3>
                        <div class="d-flex justify-content-center gap-3">
                            <button id="btnOn" class="btn btn-power btn-on">
                                <i class="bi bi-power me-1"></i> On
                            </button>
                            <button id="btnOff" class="btn btn-power btn-off">
                                <i class="bi bi-power me-1"></i> Off
                            </button>
                        </div>
                    </div>
                    
                    <!-- Brightness Control Section -->
                    <div class="control-section">
                        <h3 class="section-title">Brightness</h3>
                        <div class="mb-3">
                            <label class="control-label">
                                <i class="bi bi-brightness-high"></i> Level
                                <span id="brightnessValue" class="slider-value ms-2">50%</span>
                            </label>
                            <input type="range" class="form-range" min="0" max="100" value="50" id="brightnessSlider">
                        </div>
                    </div>
                    
                    <!-- Color Temperature Control Section -->
                    <div class="control-section">
                        <h3 class="section-title">Temperature</h3>
                        <div class="mb-3">
                            <label class="control-label">
                                <i class="bi bi-thermometer-half"></i> Kelvin
                                <span id="tempValue" class="slider-value ms-2">4600K</span>
                            </label>
                            <input type="range" class="form-range" min="2700" max="6500" value="4600" id="tempSlider">
                        </div>
                    </div>
                    
                    <!-- RGB Color Picker Section -->
                    <div class="control-section">
                        <h3 class="section-title">Color</h3>
                        <div id="colorPicker"></div>
                        <div class="mt-3 text-center">
                            <span class="text-muted small me-2">RGB:</span>
                            <span id="rgbValue" class="slider-value">255, 255, 255</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Initialize color picker
        const colorPicker = new iro.ColorPicker("#colorPicker", {
            width: 280,
            color: "#ffffff",
            borderWidth: 1,
            borderColor: "#e2e8f0",
            layout: [
                { 
                    component: iro.ui.Wheel,
                    options: {
                        wheelAngle: 0,
                        wheelDirection: 'anticlockwise'
                    }
                },
                { 
                    component: iro.ui.Slider,
                    options: {
                        sliderType: 'value',
                        borderWidth: 1,
                        borderColor: '#e2e8f0'
                    }
                }
            ]
        });

        // Current state
        let currentState = {
            power: false,
            brightness: 50,
            temp: 4600,
            color: { r: 255, g: 255, b: 255 },
            connected: false
        };

        // DOM elements
        const btnOn = document.getElementById('btnOn');
        const btnOff = document.getElementById('btnOff');
        const brightnessSlider = document.getElementById('brightnessSlider');
        const brightnessValue = document.getElementById('brightnessValue');
        const tempSlider = document.getElementById('tempSlider');
        const tempValue = document.getElementById('tempValue');
        const rgbValue = document.getElementById('rgbValue');
        const lightIcon = document.getElementById('lightIcon');
        const statusIndicator = document.getElementById('statusIndicator');
        const statusText = document.getElementById('statusText');

        // Simulate connection
        setTimeout(() => {
            currentState.connected = true;
            updateUI();
        }, 1500);

        // Event listeners
        btnOn.addEventListener('click', () => {
            currentState.power = true;
            sendCommand(`{"method":"setPilot","params":{"state":true}}`);
            updateUI();
        });

        btnOff.addEventListener('click', () => {
            currentState.power = false;
            sendCommand(`{"method":"setPilot","params":{"state":false}}`);
            updateUI();
        });

        brightnessSlider.addEventListener('input', () => {
            currentState.brightness = parseInt(brightnessSlider.value);
            brightnessValue.textContent = `${currentState.brightness}%`;
            
            if (currentState.power) {
                sendCommand(`{"method":"setPilot","params":{"dimming":${currentState.brightness}}}`);
            }
        });

        tempSlider.addEventListener('input', () => {
            currentState.temp = parseInt(tempSlider.value);
            tempValue.textContent = `${currentState.temp}K`;
            
            if (currentState.power) {
                sendCommand(`{"method":"setPilot","params":{"temp":${currentState.temp}}}`);
            }
        });

        colorPicker.on('color:change', (color) => {
            currentState.color = color.rgb;
            rgbValue.textContent = `${color.rgb.r}, ${color.rgb.g}, ${color.rgb.b}`;
            
            if (currentState.power) {
                sendCommand(`{"method":"setPilot","params":{"r":${color.rgb.r},"g":${color.rgb.g},"b":${color.rgb.b}}}`);
            }
        });

        // Update UI based on current state
        function updateUI() {
            if (currentState.power) {
                lightIcon.classList.add('active');
                btnOn.classList.add('active');
                btnOff.classList.remove('active');
            } else {
                lightIcon.classList.remove('active');
                btnOn.classList.remove('active');
                btnOff.classList.add('active');
            }
            
            if (currentState.connected) {
                statusIndicator.classList.add('active');
                statusText.textContent = 'Connected';
                statusText.classList.remove('text-muted');
                statusText.classList.add('text-success');
            } else {
                statusIndicator.classList.remove('active');
                statusText.textContent = 'Disconnected';
                statusText.classList.add('text-muted');
                statusText.classList.remove('text-success');
            }
        }

        // Send command to API
        function sendCommand(command) {
            // Simulate API call
            console.log('Sending command:', command);
            
            fetch('/control', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    command: command
                })
            })
            .then(response => {
                if (!response.ok) {
                    console.error('Command failed');
                }
                return response.json();
            })
            .then(data => {
                console.log('Success:', data);
            })
            .catch(error => {
                console.error('Error:', error);
            });
        }

        // Initialize UI
        updateUI();
    </script>
</body>
</html>